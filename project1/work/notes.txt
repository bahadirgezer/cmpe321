Audience(username: string, password: string, name: string, surname: string)


CREATE TABLE Audience(
username VARCHAR(255), 
password VARCHAR(255),
name VARCHAR(255),
surname VARCHAR(255),
PRIMARY KEY (username)
)


Director(username: string, password: string, name: string, surname: string, nation: string)


CREATE TABLE Director(
username VARCHAR(255), 
password VARCHAR(255),
name VARCHAR(255),
surname VARCHAR(255),
nation VARCHAR(255) NOT NULL,
PRIMARY KEY (username)
)


Rating_Platform(id: integer, name: string)


CREATE TABLE Rating_Platform(
id INT, 
name VARCHAR(255) UNIQUE,
PRIMARY KEY (id)
)


Movie(id: integer, name: string, duration: integer, overall_rating: real, director_name: string)


CREATE TABLE Movie(
id INT, 
name VARCHAR(255),
duration INT,
overall_rating REAL,
director_name VARCHAR(255) NOT NULL, 
PRIMARY KEY (id),
FOREIGN KEY (director_name) REFERENCES Director
)
What should happen on delete?










Movie_Session(id: integer, movie_id: integer, theater_id: integer, time_slot: integer, date: string)


CREATE TABLE Movie_Session(
id INT, 
movie_id INT,,
theater_id INT,
time_slot INT,
date DATE, 
PRIMARY KEY (id),
FOREIGN KEY (movie_id) REFERENCES Movie,
FOREIGN KEY (theater_id) REFERENCES Theater
)


Theater(id: integer, name: string, capacity: integer, district: string)


CREATE TABLE Theater
(
id INT, 
name VARCHAR(255),
capacity INT,
district VARCHAR(255),
PRIMARY KEY (id)
)


Genre(id: integer, name: string)


CREATE TABLE Genre(
        id INT,
        name VARCHAR(255)
        PRIMARY KEY (id)
)


























Movie_Director_On_Platform(movie_id: integer, director_name: string, platform_id: integer)


CREATE TABLE Movie_Director_On_Platform(
movie_id INT, 
director_name INT,,
platform_id INT,
PRIMARY KEY (movie_id, director_name),
FOREIGN KEY (movie_id) REFERENCES Movie
        ON DELETE CASCADE
ON UPDATE CASCADE
FOREIGN KEY (director_name) REFERENCES Director
ON DELETE CASCADE
ON UPDATE CASCADE
)


Ticket(username: string, session_id: integer)


CREATE TABLE Ticket(
username VARCHAR(255), 
session_id INT,,
PRIMARY KEY (username, session_id),
FOREIGN KEY (username) REFERENCES Audience,
FOREIGN KEY (session_id) REFERENCES Movie_Session
)


Platform_Subscription(username: string, platform_id: integer)


CREATE TABLE Platform_Subscription(
username VARCHAR(255), 
platform_id INT,,
PRIMARY KEY (username, platform_id),
FOREIGN KEY (username) REFERENCES Audience,
FOREIGN KEY (platform_id) REFERENCES Rating_Platform
)


Movie_Ratings(username: string, rating: real, movie_id: integer)


CREATE TABLE Movie_Ratings(
username VARCHAR(255), 
rating REAL,
movie_id INT,,
PRIMARY KEY (username, movie_id),
FOREIGN KEY (username) REFERENCES Audience,
FOREIGN KEY (movie_id) REFERENCES Movie
)






Movie_Genre(movie_id: integer, genre_id: integer)


CREATE TABLE Movie_Genre(
movie_id INT,
genre_id INT,
PRIMARY KEY (movie_id, genre_id),
FOREIGN KEY (movie_id) REFERENCES Movie,
FOREIGN KEY (genre_id) REFERENCES Genre
)




Movie_Predecessor(predecessor_id: integer, successor_id: integer)


CREATE TABLE Movie_Predecessor(
predecessor_id INT,
successor_id INT,
PRIMARY KEY (predecessor_id, successor_id),
FOREIGN KEY (predecessor_id) REFERENCES Movie,
FOREIGN KEY (successor_id) REFERENCES Movie
)
 
Database_Managers(username: string, password: string)


CREATE TABLE Audience(
username VARCHAR(255), 
password VARCHAR(255),
PRIMARY KEY (username)
)




























Comments About The ER Diagram:
        Bahadirin aggregation zort
        Add overall rating,
        Add the attributes of the movie session
General Questions:
        Should we add NOT NULL everywhere,
        We may specify each table id accordingly instead of simply ‘id’


Constraints that we cannot cover in ER:
* Each director can have at most one platform id.
* No two movie sessions can overlap in terms of theater and the time it’s
screened
* There are four time slots for each day.
* If a movie has any predecessor movies, all predecessor movies need to
be watched in order to watch that movie.
* A user can rate a movie
– if they are already subscribed to the platform that the movie can be rated.
AND
– if they have bought a ticket to the movie.
* There can be at most 4 database managers registered to the system.




Constraints we cannot cover in Schemas:
* The ones in ER
* Every movie needs to have at least one genre.


Suggestion: Delete the aggregation and just don't care that we don't have a direct connection between the movie and the platform. Since the movie has a director we can assume that the platform of the movie is taken from the director.